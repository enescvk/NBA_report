from reportlab.lib.pagesizes import A4
from reportlab.pdfgen import canvas
from reportlab.lib import colors
from reportlab.lib.units import inch  # Import inch for units
import datetime
import cairosvg
import pandas as pd
from scrape_nba import *
from create_cover_page import create_cover_page_with_background

# This file creates the pages of the report taking data from scrape_nba.py

def download_and_convert_svg_to_png(svg_url, output_filename):
    # Download the SVG image
    response = requests.get(svg_url)
    if response.status_code == 200:
        # Convert the SVG data to PNG and save it
        cairosvg.svg2png(bytestring=response.content, write_to=output_filename)
        print(f"SVG image saved as PNG: {output_filename}")
    else:
        print(f"Failed to download the image. Status code: {response.status_code}")

def get_data():
    url = "https://www.nba.com/teams"
    main_dict = scrape_nba_region_and_teams(url)
    data = create_df(main_dict)
    return data

def create_report(pdf_filename, df):
    """Creates a PDF report with a page for each NBA team"""
    # Create PDF
    c = canvas.Canvas(pdf_filename, pagesize=A4)
    width, height = A4

    # Process each team
    for index, row in df.iterrows():
        # Get team info
        logo_url = row['Logo Source']
        team_name = row['Team Name']
        region = row['Region']
        profile_link = row['Profile Link']
        
        # Convert team logo
        png_filename = f"team_logo_{index}.png"  # Unique filename for each team
        download_and_convert_svg_to_png(logo_url, png_filename)

        # Add team logo
        logo_size = 2 * inch
        logo_x = (width - logo_size) / 2
        logo_y = height - 3 * inch
        c.drawImage(png_filename, 
                   logo_x,
                   logo_y,
                   logo_size, 
                   logo_size, 
                   preserveAspectRatio=True)
        
        # Add team name
        c.setFont("Helvetica-Bold", 24)
        c.setFillColor(colors.black)
        c.drawCentredString(width / 2, height - 1.5 * inch, team_name)
        
        # Add conference and division
        c.setFont("Helvetica", 16)
        c.drawCentredString(width / 2, height - 4.5 * inch, f"Region: {region}")
        c.drawCentredString(width / 2, height - 5 * inch, f"Profile_Link: {profile_link}")
        
        # Add team statistics (assuming these columns exist in your DataFrame)
        c.setFont("Helvetica", 14)
        y_position = height - 6 * inch
        stats_spacing = 0.5 * inch
        
        # Add any additional team statistics you have in your DataFrame
        for col in df.columns:
            if col not in ['Logo Source', 'Team Name', 'Region', 'Profile Link']:
                stat_value = row[col]
                c.drawString(2 * inch, y_position, f"{col}: {stat_value}")
                y_position -= stats_spacing
        
        # Add page number
        c.setFont("Helvetica", 10)
        c.drawCentredString(width / 2, 0.5 * inch, f"Page {index + 1} of {len(df)}")
        
        # Add author information
        c.setFont("Helvetica", 12)
        c.drawCentredString(width / 2, 0.75 * inch, "Generated by Enes Cevik")
        
        # Add a line separator
        c.line(inch, inch, width - inch, inch)
        
        # Start new page for next team
        c.showPage()
    
    # Save the PDF
    c.save()
    
    # Clean up temporary PNG files
    import os
    for index in range(len(df)):
        try:
            os.remove(f"team_logo_{index}.png")
        except:
            pass
 
# Example usage
year = datetime.datetime.now().year
pdf_filename = f"nba_team_statistics_{year}.pdf"
pdf_body_name = f"nba_team_statistics_{year}_body.pdf"

df = get_data()
create_cover_page_with_background(pdf_filename, year)
create_report(pdf_body_name, df)
#print(df.columns)